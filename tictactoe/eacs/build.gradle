plugins {
    id 'azuki.kotlin-conventions'
}

/**
 * There are two ways in which to provide the adapters/implementations for the scenarios to run against.
 *
 * The first is simply to add the require dependencies to the test runtime classpath. This method has the limitation
 * that you cannot work with two versions of the same code, or where different implementations rely on different
 * versions of the same libraries.
 *
 * This first method is illustrated by the commented out snippet below.
 */

//dependencies {
//    api project(":tictactoe:dsl")
//    testRuntimeOnly project(":tictactoe:adapter-vdm")
//    testRuntimeOnly 'org.apache.logging.log4j:log4j-slf4j-impl:2.17.0'
//}
//
//test {
//    systemProperties = [
//        retainOvertureTempFiles: project.findProperty("retainOvertureTempFiles") ?: true,
//    ]
//}

/**
 * The second, more powerful, method is to specify a jar that contains the necessary artifacts for a given
 * implementation (typically a classpath jar). Each of these jars will be loaded with an isolated classloader enabling
 * scenarios to be run against different versions of the same code.
 *
 * This second method is demonstrated below.
 */

configurations {
    vdm
    sampleImplementationV1
    sampleImplementationV2
}

dependencies {
    api project(":tictactoe:dsl")
    vdm project(":tictactoe:adapter-vdm")
    sampleImplementationV1 project(":tictactoe:adapter-implementation")
    sampleImplementationV1 project(":tictactoe:implementation-v1")
    sampleImplementationV2 project(":tictactoe:adapter-implementation")
    sampleImplementationV2 project(":tictactoe:implementation-v2")
    testRuntimeOnly 'org.apache.logging.log4j:log4j-slf4j-impl:2.17.0'
}

task vdmClasspathJar(type: Jar) {
    dependsOn configurations.vdm
    archiveBaseName = 'VDM'
    manifest {
        attributes("Class-Path": configurations.vdm.collect { it.absolutePath }.join(' '))
    }
}

task sampleImplementationV1ClasspathJar(type: Jar) {
    dependsOn configurations.sampleImplementationV1
    archiveBaseName = 'SampleImpl-v1'
    manifest {
        attributes("Class-Path": configurations.sampleImplementationV1.collect { it.absolutePath }.join(' '))
    }
}

task sampleImplementationV2ClasspathJar(type: Jar) {
    dependsOn configurations.sampleImplementationV2
    archiveBaseName = 'SampleImpl-v2'
    manifest {
        attributes("Class-Path": configurations.sampleImplementationV2.collect { it.absolutePath }.join(' '))
    }
}

ext {
    // default impls
    setProperty("impl.includes", "SampleImpl,VDM")
}

test {
    dependsOn vdmClasspathJar
    dependsOn sampleImplementationV2ClasspathJar

    def instanceJars = [
        vdmClasspathJar.archiveFile.get().asFile.absolutePath,
        sampleImplementationV2ClasspathJar.archiveFile.get().asFile.absolutePath,
    ]
    systemProperties = [
        retainOvertureTempFiles                                     : findProperty("retainOvertureTempFiles") ?: true,
        "com.anaplan.engineering.azuki.implementation.instance.jars": instanceJars.join(","),
        "com.anaplan.engineering.azuki.implementation.includes"     : findProperty("impl.includes"),
        "com.anaplan.engineering.azuki.implementation.excludes"     : findProperty("impl.excludes"),
    ]
}


// Tests creation & verify in V2 then save, and then load & verify in V1
task rollBackTest(type: Test) {
    dependsOn sampleImplementationV1ClasspathJar
    dependsOn sampleImplementationV2ClasspathJar

    systemProperties = [
        "com.anaplan.engineering.azuki.implementation.instance.jars"         : sampleImplementationV2ClasspathJar.archiveFile.get().asFile.absolutePath,
        "com.anaplan.engineering.azuki.implementation.includes"              : "SampleImpl",
        "com.anaplan.engineering.azuki.persistence.verification.instance.jar": sampleImplementationV1ClasspathJar.archiveFile.get().asFile.absolutePath,
    ]
}

// Tests creation & verify in V1 then save, and then load & verify in V2
task rollForwardTest(type: Test) {
    dependsOn sampleImplementationV1ClasspathJar
    dependsOn sampleImplementationV2ClasspathJar

    systemProperties = [
        "com.anaplan.engineering.azuki.implementation.instance.jars"         : sampleImplementationV1ClasspathJar.archiveFile.get().asFile.absolutePath,
        "com.anaplan.engineering.azuki.implementation.includes"              : "SampleImpl",
        "com.anaplan.engineering.azuki.persistence.verification.instance.jar": sampleImplementationV2ClasspathJar.archiveFile.get().asFile.absolutePath,
    ]
}

check.dependsOn(rollBackTest)
check.dependsOn(rollForwardTest)
